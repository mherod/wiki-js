{
  "batchcomplete": "",
  "query": {
    "pages": {
      "9845": {
        "pageid": 9845,
        "ns": 0,
        "title": "JavaScript",
        "extract": "JavaScript (), often abbreviated as JS, is a programming language and core technology of the Web, alongside HTML and CSS. 99% of websites use JavaScript on the client side for webpage behavior.\nWeb browsers have a dedicated JavaScript engine that executes the client code. These engines are also utilized in some servers and a variety of apps. The most popular runtime system for non-browser usage is Node.js.\nJavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard. It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM).\nThe ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O.\nAlthough Java and JavaScript are similar in name and syntax, the two languages are distinct and differ greatly in design.\n\n\n== History ==\n\n\n=== Creation at Netscape ===\nThe first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the early World Wide Web. The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.\nDuring these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a programming language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java language, while also hiring Brendan Eich to embed the Scheme language.\nThe goal was a \"language for the masses\", \"to help nonprogrammers create dynamic, interactive Web sites\". Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages. Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December.\nThe choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was a popular new language, so Eich considered the JavaScript name a marketing ploy by Netscape.\n\n\n=== Adoption by Microsoft ===\nMicrosoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft created its own interpreter called JScript.\nMicrosoft first released JScript in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Netscape Navigator. These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos for several years.\n\n\n=== The rise of JScript ===\n\nIn November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997.\nThe standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.\nHowever, the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%. This meant that JScript became the de facto standard for client-side scripting on the Web.\nMicrosoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed.\n\n\n=== Growth and standardization ===\nDuring the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer.\nIn 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition.\nMeanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools.\nGoogle debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition. The key innovation was just-in-time compilation (JIT), so other browser vendors needed to overhaul their engines for JIT.\nIn July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.\n\n\n=== Reaching maturity ===\nAmbitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015.\nThe creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system. As of 2018, Node had been used by millions of developers, and npm had the most modules of any package manager in the world.\nThe ECMAScript draft specification is currently maintained openly on GitHub, and editions are produced via regular annual snapshots. Potential revisions to the language are vetted through a comprehensive proposal process. Now, instead of edition numbers, developers check the status of upcoming features individually.\nThe current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.\n\n\n== Trademark ==\n\"JavaScript\" is a trademark of Oracle Corporation in the United States. The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009.\nA letter was circulated in September 2024, spearheaded by Ryan Dahl, calling on Oracle to free the JavaScript trademark. Brendan Eich the original creator of JavaScript, was among the over 14,000 signatories who supported the initiative.\n\n\n== Website client-side usage ==\nJavaScript is the dominant client-side scripting language of the Web, with 99% of all websites using it for this purpose. Scripts are embedded in or included from HTML documents and interact with the DOM.\nAll major web browsers have a built-in JavaScript engine that executes the code on the user's device.\n\n\n=== Examples of scripted behavior ===\nLoading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page.\nWeb page animations, such as fading objects in and out, resizing, and moving them.\nPlaying browser games.\nControlling the playback of streaming media.\nGenerating pop-up ads or alert boxes.\nValidating input values of a web form before the data is sent to a web server.\nLogging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization.\nRedirecting a user to another page.\nStoring and retrieving data on the user's device, via the storage or IndexedDB standards.\n\n\n=== Libraries and frameworks ===\nOver 80% of websites use a third-party JavaScript library or web framework as part of their client-side scripting.\njQuery is by far the most-used. Other notable ones include Angular, Bootstrap, Lodash, Modernizr, React, Underscore, and Vue. Multiple options can be used in conjunction, such as jQuery and Bootstrap.\nHowever, the term \"Vanilla JS\" was coined for websites not using any libraries or frameworks at all, instead relying entirely on standard JavaScript functionality.\n\n\n== Other usage ==\nThe use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications.\nInitial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services, but they were small niches. Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches.\nElectron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents and GNOME Shell extensions written in JavaScript.\nJavaScript has been used in some embedded systems, usually by leveraging Node.js.\n\n\n== Execution ==\n\n\n=== JavaScript engine ===\n\n\n=== Runtime system ===\nA JavaScript engine must be embedded within a runtime system (such as a web browser or a standalone system) to enable scripts to interact with the broader environment. The runtime system includes the necessary APIs for input/output operations, such as networking, storage, and graphics, and provides the ability to import scripts.\nJavaScript is a single-threaded language. The runtime processes messages from a queue one at a time, and it calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program I/O is performed using events and callback functions. This means, for example, that JavaScript can process a mouse click while waiting for a database query to return information.\nThe notable standalone runtimes are Node.js, Deno, and Bun.\n\n\n== Features ==\nThe following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.\n\n\n=== Imperative and structured ===\n\nJavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.\n\n\n=== Weakly typed ===\n\nJavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used.\n\nThe binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator\nThe binary - operator always casts both operands to a number\nBoth unary operators (+, -) always cast the operand to a number. However, + always casts to Number (binary64) while - preserves BigInt (integer)\nValues are cast to strings like the following:\n\nStrings are left as-is\nNumbers are converted to their string representation\nArrays have their elements cast to strings after which they are joined by commas (,)\nOther objects are converted to the string [object Object] where Object is the name of the constructor of the object\nValues are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively.\nJavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency. For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction.\n\nOften also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If the expression is wrapped in parentheses - ({} + []) – the curly brackets are interpreted as an empty object and the result of the expression is \"[object Object]\" as expected.\n\n\n=== Dynamic ===\n\n\n==== Typing ====\n\nJavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string. JavaScript supports various ways to test the type of objects, including duck typing.\n\n\n==== Run-time evaluation ====\n\nJavaScript includes an eval function that can execute statements provided as strings at run-time.\n\n\n=== Object-orientation (prototype-based) ===\nPrototypal inheritance in JavaScript is described by Douglas Crockford as:\n\nYou make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that?\n\nIn JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj['x'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop.\n\n\n==== Prototypes ====\n\nJavaScript uses prototypes where many other object-oriented languages use classes for inheritance. It is possible to simulate many class-based features with prototypes in JavaScript.\n\n\n==== Functions as object constructors ====\nFunctions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype). ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null). The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.\n\n\n==== Functions as methods ====\n\nUnlike in many object-oriented languages, in JavaScript there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling. When a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation.\n\n\n=== Functional ===\n\nJavaScript functions are first-class; a function is considered to be an object. As such, a function may have properties and methods, such as .call() and .bind().\n\n\n==== Lexical closure ====\n\nA nested function is a function defined within another function. It is created each time the outer function is invoked.\nIn addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.\n\n\n==== Anonymous function ====\n\nJavaScript also supports anonymous functions.\n\n\n=== Delegative ===\n\nJavaScript supports implicit and explicit delegation.\n\n\n==== Functions as roles (Traits and Mixins) ====\n\nJavaScript natively supports various function-based implementations of Role patterns like Traits and Mixins. Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain.\n\n\n==== Object composition and inheritance ====\nWhereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.\n\n\n=== Miscellaneous ===\n\n\n==== Zero-based numbering ====\nJavaScript is a zero-index language.\n\n\n==== Variadic functions ====\n\nAn indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method.\n\n\n==== Array and object literals ====\n\nLike in many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.\n\n\n==== Regular expressions ====\n\nIn a manner similar to Perl, JavaScript also supports regular expressions, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.\n\n\n==== Promises and Async/await ====\nJavaScript supports promises and Async/await for handling asynchronous operations.\n\n\n===== Promises =====\n\nA built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. Recently, the JavaScript specification introduced combinator methods, which allow developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any.\n\n\n===== Async/await =====\n\nAsync/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similarly to traditional synchronous, blocking code.\n\n\n=== Vendor-specific extensions ===\nHistorically, some JavaScript engines supported these non-standard features:\n\nconditional catch clauses (like Java)\narray comprehensions and generator expressions (like Python)\nconcise function expressions (function(args) expr; this experimental syntax predated arrow functions)\nECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21)\n\n\n== Syntax ==\n\n\n=== Simple examples ===\nVariables in JavaScript can be defined using either the var, let or const keywords.  Variables defined without keywords will be defined at the global scope.\n\nNote the comments in the examples above, all of which were preceded with two forward slashes.\nThere is no built-in Input/output functionality in JavaScript, instead it is provided by the run-time environment. The ECMAScript specification in edition 5.1 mentions that \"there are no provisions in this specification for input of external data or output of computed results\".\nHowever, most runtime environments have a console object that can be used to print output. Here is a minimalist \"Hello, World!\" program in JavaScript in a runtime environment with a console object:\n\nIn HTML documents, a program like this is required for an output:\n\nA simple recursive function to calculate the factorial of a natural number:\n\nAn anonymous function (or lambda):\n\nThis example shows that, in JavaScript, function closures capture their non-local variables by reference.\nArrow functions were first introduced in 6th Edition – ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately.\nExample of arrow function:\n\nIn JavaScript, objects can be created as instances of a class.\nObject class example:\n\nIn JavaScript, objects can be instantiated directly from a function.\nObject functional example:\n\nVariadic function demonstration (arguments is a special variable):\n\nImmediately-invoked function expressions are often used to create closures. Closures allow gathering properties and methods in a namespace and making some of them private:\n\nGenerator objects (in the form of generator functions) provide a function which can be called, exited, and re-entered while maintaining internal context (statefulness).\nJavaScript can export and import from modules:\nExport example:\n\nImport example:\n\n\n=== More advanced example ===\nThis sample code displays various JavaScript features.\n\nThe following output should be displayed in the browser window.\n\n\n== Security ==\n\nJavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.\nThere are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements). Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML.\nContent Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.\n\n\n=== Cross-site scripting ===\n\nA common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. One important solution to XSS vulnerabilities is HTML sanitization.\nSome browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS.\nXSS vulnerabilities can also occur because of implementation mistakes by browser authors.\n\n\n=== Cross-site request forgery ===\n\nAnother cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.\n\"JavaScript hijacking\" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include:\n\nrequiring an authentication token in the POST and GET parameters for any response that returns private information.\n\n\n=== Misplaced trust in the client ===\nDevelopers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:\n\nWebsite authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered.\nJavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.\nScripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.\nIt is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.\nPrototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object's prototype.\n\n\n=== Misplaced trust in developers ===\nPackage management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability. \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\" Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.\n\n\n=== Browser and plugin coding errors ===\n\nJavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges.\nThese flaws have affected major browsers including Firefox, Internet Explorer, and Safari.\nPlugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).\nIn Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges. Google Chrome similarly confines its page renderers to their own \"sandbox\".\n\n\n=== Sandbox implementation errors ===\nWeb browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.\nIncorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer and Firefox. In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.\nMicrosoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.\n\n\n=== Hardware vulnerabilities ===\nIn 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers.\nIn 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It is called \"ASLR⊕Cache\" or AnC.\nIn 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.\n\n\n== Development tools ==\nImportant tools have evolved with the language.\n\nEvery major web browser has built-in web development tools, including a JavaScript debugger.\nStatic program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines.\nSome browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.\nMany text editors have syntax highlighting support for JavaScript code.\n\n\n== Related technologies ==\n\n\n=== Java ===\nA common misconception is that JavaScript is directly related to Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed, and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0.\nBoth languages first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications.\nThe differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme.\n\n\n=== JSON ===\nJSON is a data format derived from JavaScript; hence the name JavaScript Object Notation. It is a widely used format supported by many other programming languages.\n\n\n=== Transpilers ===\nMany websites are JavaScript-heavy, so transpilers have been created to convert code written in other languages, which can aid the development process.\nTypeScript and CoffeeScript are two notable languages that transpile to JavaScript.\n\n\n=== WebAssembly ===\nWebAssembly is a newer language with a bytecode format designed to complement JavaScript, especially the performance-critical portions of web page scripts. All of the major JavaScript engines support WebAssembly, which runs in the same sandbox as regular JavaScript code.\nasm.js is a subset of JavaScript that served as the forerunner of WebAssembly.\n\n\n== References ==\n\n\n== Sources ==\nDere, Mohan (21 December 2017). \"How to integrate create-react-app with all the libraries you need to make a great app\". freeCodeCamp. Retrieved 14 June 2018.\nPanchal, Krunal (26 April 2022). \"Angular vs React Detailed Comparison\". Groovy Web. Retrieved 5 June 2023.\n\n\n== Further reading ==\n\nFlanagan, David. JavaScript: The Definitive Guide. 7th edition. Sebastopol, California: O'Reilly, 2020. ISBN 978-1-491-95202-3.\nHaverbeke, Marijn. Eloquent JavaScript. 3rd edition. No Starch Press, 2018. 472 pages. ISBN 978-1593279509.(download)\nZakas, Nicholas. Principles of Object-Oriented JavaScript, 1st edition. No Starch Press, 2014. 120 pages. ISBN 978-1593275402.\n\n\n== External links ==\n\nThe Modern JavaScript Tutorial. A community maintained continuously updated collection of tutorials on the entirety of the language.\n\"JavaScript: The First 20 Years\". Retrieved 6 February 2022."
      }
    }
  }
}